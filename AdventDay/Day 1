Advent of code
 count the number of times a depth measurement increases from the previous measurement. (There is no measurement before the first measurement.) In the example above, the changes are as follows:

199 (N/A - no previous measurement)
200 (increased)
208 (increased)
210 (increased)
200 (decreased)
207 (increased)
240 (increased)
269 (increased)
260 (decreased)
263 (increased)
In this example, there are 7 measurements that are larger than the previous measurement.

Solution
import java.io.*;

class AdventDay1
{
	public static void main(String arg[])
	{
		int count =-1;
		try
		{
			File file = new File("Documents/input.csv");
			BufferedReader br = new BufferedReader(new FileReader(file));
			String string;
			String previousNo = br.readLine();
			while ((string = br.readLine()) != null)
			{
				Long value = Long.parseLong(string);
				Long preValue1 = Long.parseLong(previousNo);
				if(value>preValue1)
				{
					count++;
				}
				previousNo= string; 
			}
			System.out.println(count);
		}
	catch(Exception e)
	{
		System.out.println("exception  "+ e);
	}
		
}

--- Part Two ---
Considering every single measurement isn't as useful as you expected: there's just too much noise in the data.

Instead, consider sums of a three-measurement sliding window. Again considering the above example:

199  A      
200  A B    
208  A B C  
210    B C D
200  E   C D
207  E F   D
240  E F G  
269    F G H
260      G H
263        H
Start by comparing the first and second three-measurement windows. The measurements in the first window are marked A (199, 200, 208); their sum is 199 + 200 + 208 = 607. The second window is marked B (200, 208, 210); its sum is 618. The sum of measurements in the second window is larger than the sum of the first, so this first comparison increased.

Your goal now is to count the number of times the sum of measurements in this sliding window increases from the previous sum. So, compare A with B, then compare B with C, then C with D, and so on. Stop when there aren't enough measurements left to create a new three-measurement sum.

In the above example, the sum of each three-measurement window is as follows:

A: 607 (N/A - no previous sum)
B: 618 (increased)
C: 618 (no change)
D: 617 (decreased)
E: 647 (increased)
F: 716 (increased)
G: 769 (increased)
H: 792 (increased)
In this example, there are 5 sums that are larger than the previous sum.




Solution
import java.io.*;

class AdventDay1
{
	public static void main(String arg[])
	{
		int count =-1;
		try
		{
			File file = new File("Documents/input.csv");
			BufferedReader br = new BufferedReader(new FileReader(file));
			String string;
			String previousNo = br.readLine();
			String secpreNO = br.readLine();
			Long sum=0l;
			while ((string = br.readLine()) != null)
			{
				Long value = Long.parseLong(string);
				Long preValue1 = Long.parseLong(previousNo);
				Long preValue2 = Long.parseLong(secpreNO);
				Long currentSum = value+preValue1+preValue2;
				if(currentSum>sum)
				{
					count++;
				}
				previousNo= secpreNO; 
				secpreNO = string;
				sum =currentSum;
			}
			System.out.println(count);
		}
	catch(Exception e)
	{
		System.out.println("exception  "+ e);
	}
		
}
